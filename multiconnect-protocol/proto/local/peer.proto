syntax = "proto2";

package multiconnect.local.peer;

// Sent from the daemon to a client when a peer is found
message L0PeerFound {
  // The packet id
  required uint32 id = 1;
  // The device found
  required bytes device = 2;
}

// Send from the daemon to a client when a peer expires
message L1PeerExpired {
  // The packet id
  required uint32 id = 1;
  // The peer id of the expired peer
  required string peer_id = 2;
}

// Send a request to pair with a peer
message L2PeerPairRequest {
  // The packet id
  required uint32 id = 1;
  // The request uuid
  required string req_uuid = 2;
  // The device in question (when sending the target peer, when recv the peer that send the request)
  required bytes device = 3;
}

// A response to a pair request
message L3PeerPairResponse {
  // The packet id
  required uint32 id = 1;
  // The uuid of the request
  required string req_uuid = 2;
  // If the pair request is accepted or not
  required bool accepted = 3;
} 

// Refresh mdns
message L4Refresh {
  // The packet id
  required uint32 id = 1;
}

// Send status about a saved peer
message L7SavedPeerStatus {
  // The id of the packet
  required uint32 id = 1;
  // A list of saved peers
  repeated SavedPeer peers = 2;

  // Message about a saved peer
  message SavedPeer {
    // The peer id of the peer
    required string peer_id = 1;
    // If the peer is online or not
    required bool online = 2;
    // If the peer is paired or not
    required bool paired = 3;
    // The device info about the peer
    required bytes device = 4;
    // When it was last seen
    required uint64 last_seen = 5;
  }
}

// Update status of a single saved peer
message L8SavedPeerUpdate {
  // The packet id
  required uint32 id = 1;

  // The peer id being updated
  required string peer_id = 2;

  // Updated fields
  optional bool online = 3;
  optional bool paired = 4;
  optional bytes device = 5;
  optional uint64 last_seen = 6;
}


// Should be L0 im lazy tho
message L6PeerDiscovered {
  required uint32 id = 1;
  required string peer_id = 2;
}

